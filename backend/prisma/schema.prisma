generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_roles {
  student
  teacher
  coordinator
  admin
}

model users {
  id                 String               @id @default(uuid())
  name               String
  cpf                String               @unique
  role               user_roles           @default(student)
  email              String
  password           String
  matriculation      String
  institute_id       String               @map("institute_id")
  institute          institutes           @relation(fields: [institute_id], references: [id])
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  teachers           teachers[]
  answers            answers[]
  activities         activities[]
  userRequestAnswers userRequestAnswers[]

  @@map(name: "users")
}

model institutes {
  id         String   @id @default(uuid())
  acronym    String?  @unique
  name       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users[]

  @@map(name: "institutes")
}

enum university_degrees {
  mastermin
  doctor
}

model teachers {
  id                 String               @id @default(uuid())
  university_degree  university_degrees
  user_id            String               @unique @map("user_id")
  user               users                @relation(fields: [user_id], references: [id])
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  activitiesTeachers activitiesTeachers[]

  @@map(name: "teachers")
}

model status {
  id         String       @id @default(uuid())
  name       String
  forms      forms?
  workflows  workflows?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  activities activities[]

  @@map(name: "status")
}

enum step_types {
  send_email
  request_answer
  conditional
  swap_workflow
}

model steps {
  id                    String                  @id @default(uuid())
  identifier            String
  name                  String
  type                  step_types
  content               Json                    @default("{}")
  workflow_id           String                  @map("workflow_id")
  workflow              workflows               @relation(fields: [workflow_id], references: [id])
  next_step_id          String?                 @unique @map("next_step_id")
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  activityworkflowSteps activityworkflowSteps[]

  @@unique([workflow_id, identifier])
  @@index([workflow_id, identifier])
  @@map(name: "steps")
}

model workflows {
  id               String             @id @default(uuid())
  name             String
  status_id        String             @unique @map("status_id")
  status           status             @relation(fields: [status_id], references: [id])
  deleted          Boolean            @default(false)
  first_step_id    String?            @unique @map("first_step_id")
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime?
  steps            steps[]
  activityWorkflow activityWorkflow[]

  @@map(name: "workflows")
}

enum form_types {
  public
  private
}

model forms {
  id             String           @id @default(uuid())
  form_type      form_types       @default(public)
  slug           String           @unique
  name           String           @default("")
  description    String           @default("")
  status_id      String?          @unique @map("status_id")
  status         status?          @relation(fields: [status_id], references: [id])
  content        Json             @default("{}")
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  formOpenPeriod formOpenPeriod[]
  requestAnswers requestAnswers[]
  answers        answers[]

  @@map(name: "forms")
}

model formOpenPeriod {
  id         String   @id @default(uuid())
  start_date DateTime
  end_date   DateTime
  form_id    String   @map("form_id")
  form       forms    @relation(fields: [form_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map(name: "form_opening_period")
}

model activities {
  id               String               @id @default(uuid())
  name             String               @default("")
  matriculation    Int                  @unique @default(autoincrement())
  status_id        String               @map("status_id")
  status           status               @relation(fields: [status_id], references: [id])
  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt
  user_id          String               @map("user_id")
  users            users                @relation(fields: [user_id], references: [id])
  masterminds      activitiesTeachers[]
  activityWorkflow activityWorkflow[]
  answers          answers[]
  requestAnswers   requestAnswers[]

  @@map(name: "activities")
}

model activitiesTeachers {
  activity_id String     @map("activity_id")
  activity    activities @relation(fields: [activity_id], references: [id])
  teacher_id  String     @map("teacher_id")
  teacher     teachers   @relation(fields: [teacher_id], references: [id])
  assigned_at DateTime   @default(now())
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@id([activity_id, teacher_id])
  @@map(name: "activities_teachers")
}

enum activity_workflow_status {
  inactive
  in_queue
  done
  error
  in_progress
}

model activityWorkflow {
  id                    String                  @id @default(uuid())
  activity_id           String                  @map("activity_id")
  activity              activities              @relation(fields: [activity_id], references: [id])
  workflow_id           String                  @map("workflow_id")
  workflow              workflows               @relation(fields: [workflow_id], references: [id])
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  activityworkflowSteps activityworkflowSteps[]

  @@map(name: "activity_workflow")
}

model activityworkflowSteps {
  id                 String                   @id @default(uuid())
  active_workflow_id String                   @map("active_workflow_id")
  active_workflow    activityWorkflow         @relation(fields: [active_workflow_id], references: [id])
  status             activity_workflow_status @default(inactive)
  step_id            String                   @map("step_id")
  step               steps                    @relation(fields: [step_id], references: [id])
  response           Json?
  created_at         DateTime                 @default(now())
  updated_at         DateTime                 @updatedAt
  requestAnswers     requestAnswers[]

  @@map(name: "activity_workflow_steps")
}

model answers {
  id                 String               @id @default(uuid())
  content            Json                 @default("{}")
  user_id            String               @map("user_id")
  user               users                @relation(fields: [user_id], references: [id])
  activity_id        String               @map("activity_id")
  activity           activities           @relation(fields: [activity_id], references: [id])
  form_id            String               @map("form_id")
  form               forms                @relation(fields: [form_id], references: [id])
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  userRequestAnswers userRequestAnswers[]

  @@map(name: "answers")
}

enum request_answer_status {
  pending
  proccess
  evaluated
}

model requestAnswers {
  id                        String                @id @default(uuid())
  status                    request_answer_status @default(pending)
  form_id                   String                @map("form_id")
  form                      forms                 @relation(fields: [form_id], references: [id])
  activity_id               String                @map("activity_id")
  activity                  activities            @relation(fields: [activity_id], references: [id])
  activity_workflow_step_id String                @map("activity_workflow_step_id")
  activity_workflow_step    activityworkflowSteps @relation(fields: [activity_workflow_step_id], references: [id])
  created_at                DateTime              @default(now())
  updated_at                DateTime              @updatedAt
  userRequestAnswers        userRequestAnswers[]

  @@map(name: "request_answers")
}

model userRequestAnswers {
  request_answer_id String         @map("request_answer_id")
  request_answer    requestAnswers @relation(fields: [request_answer_id], references: [id])
  user_id           String
  user              users          @relation(fields: [user_id], references: [id])
  created_at        DateTime       @default(now())
  answer_id         String?        @unique
  answer            answers?       @relation(fields: [answer_id], references: [id])
  updated_at        DateTime       @updatedAt

  @@id([request_answer_id, user_id])
  @@map(name: "request_answers_users")
}

model logs {
  id            String   @id @default(uuid())
  invocation_id String
  user_id       String
  function      String
  content       Json     @default("{}")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map(name: "logs")
}
